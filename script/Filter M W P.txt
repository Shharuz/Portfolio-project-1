const priceRangeInput = document.querySelectorAll('.filter__form__price-range input[type="number"]') //block price range

/*removeWrapperFor6Cards(); //on line 755

    let minPrice = priceRangeInput[0].value;
    let maxPrice = priceRangeInput[1].value;

    for (let itemCard of collectionOfFilteredCardForAll) {
        itemCard.classList.add('hide');
    };
    let manufacturerAll = document.querySelectorAll('#manufacturer input[type=checkbox]');
    let weightInGramsAll = document.querySelectorAll('#weightInGrams input[type=checkbox]');



    let checkInputCheckedInManufacturerAllAndweightInGramsAll = function() { //check that at least 1 element is selected in both manufacturer and weightInGrams
        let countManufact = 0;
        let countWeight = 0;
        for (let itemManufact of manufacturerAll) {
            if (itemManufact.checked) {
                countManufact++
            }
        };

        for (let itemWeight of weightInGramsAll) {
            if (itemWeight.checked) {
                countWeight++
            }
        };
        if (countManufact >= 1 && countWeight >= 1) {
            return true
        } else if (countManufact == 0 && countWeight == 0) {
            return false
        };

        console.log(countManufact);
        console.log(countWeight);

    };



    if (checkInputCheckedInManufacturerAllAndweightInGramsAll()) {

        for (let itemManufact of manufacturerAll) {
            if (itemManufact.checked) {
                for (let itemCard of collectionOfFilteredCardForAll) {
                    if (itemManufact.id == itemCard.getAttribute('data-manufacturer-filter')) { //if the ID of the checked manufacturer matches the data-manufacturer-filter of the card
                        itemCard.classList.remove('hide'); //then it will remove the hide class of the card
                    } //but since the hide class has been removed in certain cards, in order to additionally filter by weightInGrams, 
                    for (let itemWeight of weightInGramsAll) { //you need to add the hide class here
                        if (!itemWeight.checked) {
                            for (let itemCard of collectionOfFilteredCardForAll) {
                                if (itemWeight.id == itemCard.querySelector('.weightInGrams').innerHTML.slice(0, -2)) {
                                    itemCard.classList.add('hide');
                                };
                            };
                        };
                    };

                };
            };
        };
        let collectOfFilteredCardOfManufactAndWeight = [];
        for (let itemCard of allCards) {
            if (!itemCard.classList.contains('hide')) {
                collectOfFilteredCardOfManufactAndWeight.push(itemCard)
            };
        };

        filterPrice(collectOfFilteredCardOfManufactAndWeight); //on line 267

    } else if (checkInputCheckedInManufacturerAllAndweightInGramsAll() == false) {

        for (let itemCard of allCards) {
            itemCard.classList.remove('hide')
        };

        let collectOfFilteredCardOfManufactAndWeight = [];
        for (let itemCard of allCards) {
            if (!itemCard.classList.contains('hide')) {
                collectOfFilteredCardOfManufactAndWeight.push(itemCard)
            };
        };

        filterPrice(collectOfFilteredCardOfManufactAndWeight);
    } else {
        for (let itemManufact of manufacturerAll) {
            if (itemManufact.checked) {
                for (let itemCard of collectionOfFilteredCardForAll) { //if any element from manufacturer is checked, 
                    if (itemManufact.id == itemCard.getAttribute('data-manufacturer-filter')) { //then the ID of this element is compared with the data-manufacturer-filter card
                        itemCard.classList.remove('hide');
                    }
                }
            }
        }
        for (let itemWeight of weightInGramsAll) {
            if (itemWeight.checked) {
                for (let itemCard of collectionOfFilteredCardForAll) { //if any element from weightInGrams is checked,
                    if (itemWeight.id == itemCard.querySelector('.weightInGrams').innerHTML.slice(0, -2)) { //then the ID of this element is compared with the element with the class weightInGrams
                        itemCard.classList.remove('hide');
                    }
                }
            }
        }
        let collectOfFilteredCardOfManufactAndWeight = [];
        for (let itemCard of allCards) {
            if (!itemCard.classList.contains('hide')) {
                collectOfFilteredCardOfManufactAndWeight.push(itemCard)
            };
        };

        filterPrice(collectOfFilteredCardOfManufactAndWeight); //on line 267
    };





    function filterPrice(par) {
        for (let itemCard of par) {

            if (parseInt(itemCard.querySelector('.price').innerHTML) > minPrice && parseInt(itemCard.querySelector('.price').innerHTML) < maxPrice) { //the comparison is with the price indicated on the card /minPrice maxPrice on line 166, 167
                itemCard.classList.remove('hide');
            } else {
                itemCard.classList.add('hide');
            }
        }
    }

    wrapperForCards.style.transform = 'translateX(0)'; //resets wrapperForCards position and removes nav elements, creates new ones on line 288
    let elementNav = navCardsGoods.querySelectorAll('span');
    elementNav.forEach((item) => {
        item.remove();
    });

    let collectionOfFilteredCard = [];
    addFilteredCardsToCollection(collectionOfFilteredCard); //on line 302

    get–°ollectionOfFilteredCard(collectionOfFilteredCard); //on line 298

    choiceHowToSort();

    createSliderNavElemAndMove(collectionOfFilteredCard); //on line 301*/